# miniapp.py
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import logging
from typing import Any, Dict

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo,
)

# ==== –ó–∞–≥—Ä—É–∂–∞–µ–º .env ====
# –í —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —Å–æ–∑–¥–∞—ë—à—å .env (—Å–º. —à–∞–±–ª–æ–Ω –Ω–∏–∂–µ)
load_dotenv()

BOT_TOKEN     = os.getenv("BOT_TOKEN", "").strip()
WEBAPP_URL    = os.getenv("WEBAPP_URL", "").strip()   # https://<—Ç–≤–æ–µ>.pages.dev
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()

# --- –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
missing = []
if not BOT_TOKEN:      missing.append("BOT_TOKEN")
if not WEBAPP_URL:     missing.append("WEBAPP_URL")
if not OPENAI_API_KEY: missing.append("OPENAI_API_KEY")
if missing:
    raise RuntimeError(f"–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

# ==== OpenAI (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK) ====
# pip install openai>=1.44
from openai import OpenAI
oai = OpenAI(api_key=OPENAI_API_KEY)

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("miniapp")

# ==== Aiogram v3 ====
dp = Dispatcher()


def miniapp_kb() -> ReplyKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Ç–≤–æ—é Mini App (Telegram WebApp).
    –í URL –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å ?v=–Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–æ–±–∏–≤–∞—Ç—å –∫—ç—à WebView.
    """
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )
        ]],
        resize_keyboard=True,
        is_persistent=True
    )


@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(
        "–ë—Ä–æ, –∂–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª, –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç –∏ —è –ø—Ä–∏—à–ª—é –æ—Ç–≤–µ—Ç GPT —Å—é–¥–∞ –≤ —á–∞—Ç.",
        reply_markup=miniapp_kb()
    )


@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong ‚úÖ")


@dp.message(F.web_app_data)
async def on_web_app_data(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp.
    –û–∂–∏–¥–∞–µ–º JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä:
      { "kind": "ask_gpt", "prompt": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?" }
    """
    raw = m.web_app_data.data
    log.info("web_app_data raw: %s", raw)

    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–∞—Ä—Å–∏–º
    try:
        data: Dict[str, Any] = json.loads(raw)
    except Exception:
        data = {"prompt": str(raw)}

    kind   = str(data.get("kind") or "").strip()
    prompt = str(data.get("prompt") or "").strip()

    if kind != "ask_gpt" or not prompt:
        await m.answer("–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –∑–∞–ø—Ä–æ—Å ü§î –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –≤ –º–∏–Ω–∏-–∞–ø–ø–µ –∏ –Ω–∞–∂–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
        return

    # –°–æ–æ–±—â–∏–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º
    await m.answer("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶ ‚è≥")

    # –í—ã–∑–æ–≤ OpenAI Responses API
    def ask_openai(p: str) -> str:
        resp = oai.responses.create(
            model=OPENAI_MODEL,
            input=p,
            # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å system/instructions, temperature –∏ —Ç.–ø. –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏:
            # instructions="–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        )
        return resp.output_text.strip()

    try:
        reply_text = await asyncio.to_thread(ask_openai, prompt)
    except Exception as e:
        log.exception("OpenAI error")
        await m.answer(f"–ù–µ —Å–º–æ–≥ —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–æ–¥–µ–ª–∏: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await m.answer(
        f"*–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å:*\n{prompt}\n\n*–û—Ç–≤–µ—Ç GPT:*\n{reply_text}",
        parse_mode="Markdown"
    )


async def main():
    bot = Bot(BOT_TOKEN)
    log.info("Bot started. MiniApp URL: %s", WEBAPP_URL)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())