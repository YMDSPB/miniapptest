# miniapp.py
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import logging
import socket
import subprocess
import tempfile
import time
import random
from pathlib import Path
from typing import Dict, Any, Iterable, Optional, Tuple

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from playwright.sync_api import (
    sync_playwright,
    TimeoutError as PWTimeout,
    Page,
    Frame,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥
# =========================

load_dotenv()
BOT_TOKEN  = (os.getenv("BOT_TOKEN") or "").strip()
WEBAPP_URL = (os.getenv("WEBAPP_URL") or "").strip()

if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("–í .env –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å BOT_TOKEN –∏ WEBAPP_URL")

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("miniapp")
dp  = Dispatcher()

def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True, is_persistent=True
    )

# =========================
# –£—Ç–∏–ª–∏—Ç—ã: –≤–Ω–µ—à–Ω–∏–π Chrome (CDP)
# =========================

def _free_port() -> int:
    import socket as _s
    with _s.socket(_s.AF_INET, _s.SOCK_STREAM) as s:
        s.bind(("127.0.0.1", 0))
        return s.getsockname()[1]

def _chrome_candidates() -> Tuple[str, ...]:
    mac = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    return (
        os.environ.get("GOOGLE_CHROME_BIN") or "",
        mac, "google-chrome", "chrome", "chromium", "chromium-browser"
    )

def _launch_external_chrome() -> Tuple[subprocess.Popen, int, str]:
    port = _free_port()
    user_data_dir = tempfile.mkdtemp(prefix="chrome-studentplus-")

    exe = None
    for c in _chrome_candidates():
        if c and (os.path.exists(c) or c in ("google-chrome","chrome","chromium","chromium-browser")):
            exe = c; break
    if not exe:
        raise RuntimeError("Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ—Å—Ç–∞–≤—å Google Chrome –∏ –ø–æ–≤—Ç–æ—Ä–∏.")

    args = [
        exe,
        f"--remote-debugging-port={port}",
        f"--user-data-dir={user_data_dir}",
        "--no-first-run", "--no-default-browser-check",
        "--start-maximized",
        "about:blank",
    ]
    log.info("–ó–∞–ø—É—Å–∫ –≤–Ω–µ—à–Ω–µ–≥–æ Chrome: %s", " ".join(args))
    proc = subprocess.Popen(args, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # –∂–¥—ë–º –ø–æ—Ä—Ç
    deadline = time.time() + 10
    import socket as _s
    while time.time() < deadline:
        with _s.socket(_s.AF_INET, _s.SOCK_STREAM) as s:
            if s.connect_ex(("127.0.0.1", port)) == 0:
                break
        time.sleep(0.2)
    else:
        raise RuntimeError("CDP-–ø–æ—Ä—Ç Chrome –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è")
    return proc, port, user_data_dir

# =========================
# Playwright helpers
# =========================

def _iter_frames(page: Page) -> Iterable[Frame]:
    yield page.main_frame
    for fr in page.frames:
        yield fr

def _first_visible(fr: Frame, sels, timeout=4000):
    for sel in sels:
        loc = fr.locator(sel)
        try:
            loc.first.wait_for(state="visible", timeout=timeout)
            return loc.first
        except Exception:
            continue
    return None

HUMAN_DELAY_MS = 750  # ~80 —Å–∏–º–≤/–º–∏–Ω

def _human_pause(min_ms=600, max_ms=1200):
    time.sleep(random.uniform(min_ms/1000, max_ms/1000))

def login_via_hse_portal(start_url: str, username: str, password: str) -> str:
    """
    1) –û—Ç–∫—Ä—ã—Ç—å https://edu.hse.ru/login/hselogin.php
    2) –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–í–æ–π—Ç–∏¬ª
    3) –î–æ–∂–¥–∞—Ç—å—Å—è —Ñ–æ—Ä–º—ã SSO (Keycloak)
    4) –ù–∞–±—Ä–∞—Ç—å username –∏ password "–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏" (delay ~ 750ms/—Å–∏–º–≤–æ–ª)
    5) –ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è, –æ–∫–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º
    """
    proc, port, _prof = _launch_external_chrome()

    with sync_playwright() as p:
        browser = p.chromium.connect_over_cdp(f"http://127.0.0.1:{port}")
        context = browser.contexts[0] if browser.contexts else browser.new_context()
        page = context.new_page()

        # 1) –∑–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é
        page.goto(start_url, wait_until="domcontentloaded", timeout=60_000)
        try: page.wait_for_load_state("networkidle", timeout=10_000)
        except PWTimeout: pass

        # 2) –∂–º—ë–º ¬´–í–æ–π—Ç–∏¬ª
        # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏
        clicked = False
        for sel in [
            'button:has-text("–í–æ–π—Ç–∏")',
            'text=–í–æ–π—Ç–∏',
            'button >> text=/–í–æ–π—Ç–∏/i',
            'input[type="submit"]',
            'a:has-text("–í–æ–π—Ç–∏")'
        ]:
            try:
                page.locator(sel).first.click(timeout=2000)
                clicked = True
                break
            except Exception:
                continue
        if not clicked:
            # fallback: –∫–ª–∏–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –æ–∫–Ω–∞ –º–æ–¥–∞–ª–∫–∏ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
            page.mouse.click(640, 380)
        _human_pause(700, 1200)

        # –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ª–∏–±–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ª–∏–±–æ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        try:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            newp = context.wait_for_event("page", timeout=4000)
            page = newp
        except Exception:
            pass

        # –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ä–º—ã
        try: page.wait_for_load_state("domcontentloaded", timeout=30_000)
        except PWTimeout: pass
        try: page.wait_for_load_state("networkidle", timeout=15_000)
        except PWTimeout: pass

        # 3) –∏—â–µ–º –ø–æ–ª—è
        login_selectors = ['#username','input[name="username"]','input[type="email"]','input[type="text"]']
        pass_selectors  = ['#password','input[name="password"]','input[type="password"]']
        submit_selectors= ['#kc-login','button[type="submit"]','input[type="submit"]',
                           'button:has-text("–í–æ–π—Ç–∏")','button:has-text("Log in")','button:has-text("Sign in")']

        login_el = pass_el = submit_el = None
        used_frame: Optional[Frame] = None
        for fr in _iter_frames(page):
            if not login_el: login_el = _first_visible(fr, login_selectors, timeout=8000)
            if not pass_el:  pass_el  = _first_visible(fr, pass_selectors,  timeout=8000)
            if not submit_el:submit_el= _first_visible(fr, submit_selectors, timeout=4000)
            if login_el and pass_el:
                used_frame = fr
                break

        if not (login_el and pass_el):
            try: browser.close()
            except: pass
            return "–ù–µ –Ω–∞—à—ë–ª —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞ HSE SSO. –í–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –≤—Ö–æ–¥–∞."

        # 4) –Ω–∞–±–∏—Ä–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ
        login_el.click()
        login_el.fill("")  # –Ω–∞ —Å–ª—É—á–∞–π –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π
        for ch in username:
            login_el.type(ch, delay=HUMAN_DELAY_MS)
        _human_pause(900, 1500)

        pass_el.click()
        for ch in password:
            pass_el.type(ch, delay=HUMAN_DELAY_MS)

        _human_pause(600, 1100)

        # 5) —Å–∞–±–º–∏—Ç
        if submit_el:
            submit_el.click()
        else:
            pass_el.press("Enter")

        # –∂–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç/—É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        try: page.wait_for_load_state("networkidle", timeout=20_000)
        except PWTimeout: pass

        # –µ—Å–ª–∏ –ø–æ–ª—è –∏—Å—á–µ–∑–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
        success = True
        try:
            still_login = used_frame and _first_visible(used_frame, login_selectors, timeout=2000)
            still_pass  = used_frame and _first_visible(used_frame, pass_selectors,  timeout=2000)
            success = not (still_login and still_pass)
        except Exception:
            success = True

        try: browser.close()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û CDP-—Å–µ—Å—Å–∏—é, –æ–∫–Ω–æ Chrome –æ—Å—Ç–∞—ë—Ç—Å—è
        except: pass

        return "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ, –æ–∫–Ω–æ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∫—Ä—ã—Ç—ã–º." if success else \
               "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ ‚ùå (–ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å/2FA). –û–∫–Ω–æ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∫—Ä—ã—Ç—ã–º."

# =========================
# –ë–æ—Ç
# =========================

@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "–ñ–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª ‚Üí ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª ‚Üí –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å.\n"
        "–û—Ç–∫—Ä–æ—é Chrome, –Ω–∞–∂–º—É ¬´–í–æ–π—Ç–∏¬ª –Ω–∞ hselogin.php, –∑–∞–ø–æ–ª–Ω—é —Ñ–æ—Ä–º—É SSO –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –æ—Å—Ç–∞–≤–ª—é –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º.",
        reply_markup=kb()
    )

@dp.message(F.web_app_data)
async def on_webapp(m: Message):
    try:
        data = json.loads(m.web_app_data.data)
    except Exception:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–∞–ø–ø—ã.")
        return

    kind = (data.get("kind") or "").strip()
    if kind != "login_hse_slow":
        await m.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {kind}")
        return

    username = (data.get("login") or "").strip()
    password = (data.get("password") or "").strip()
    start_url = (data.get("start_url") or "https://edu.hse.ru/login/hselogin.php").strip()

    if not (username and password):
        await m.answer("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return

    await m.answer("–û—Ç–∫—Ä—ã–≤–∞—é Chrome –∏ –≤—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥‚Ä¶ –ü–µ—á–∞—Ç–∞—é –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ –ø—É–≥–∞–π—Å—è üôÇ")

    def run():
        return login_via_hse_portal(start_url, username, password)

    try:
        result = await asyncio.to_thread(run)
        await m.answer(result)
    except Exception as e:
        log.exception("Playwright error")
        await m.answer(f"Playwright —É–ø–∞–ª: {e}")

# =========================
# main
# =========================

async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())