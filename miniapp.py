# miniapp.py
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import logging
import socket
import subprocess
import tempfile
import time
from pathlib import Path
from typing import Dict, Any, Iterable, Optional, Tuple

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from playwright.sync_api import (
    sync_playwright,
    TimeoutError as PWTimeout,
    Page,
    Frame,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
# =========================

load_dotenv()
BOT_TOKEN  = (os.getenv("BOT_TOKEN") or "").strip()
WEBAPP_URL = (os.getenv("WEBAPP_URL") or "").strip()  # https://<—Ç—ã>.pages.dev?v=...

if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("–ó–∞–¥–∞–π BOT_TOKEN –∏ WEBAPP_URL –≤ .env")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("miniapp")

dp = Dispatcher()

DB_PATH = Path("storage.json")


def load_db() -> Dict[str, Any]:
    if DB_PATH.exists():
        try:
            return json.load(open(DB_PATH, "r", encoding="utf-8"))
        except Exception:
            return {}
    return {}


def save_db(data: Dict[str, Any]) -> None:
    json.dump(data, open(DB_PATH, "w", encoding="utf-8"), ensure_ascii=False, indent=2)


def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True,
        is_persistent=True,
    )

# =========================
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ Chrome (CDP)
# =========================

def _find_free_port() -> int:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(("127.0.0.1", 0))
        return s.getsockname()[1]


def _chrome_executable_candidates() -> Tuple[str, ...]:
    # macOS
    mac = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    # Linux / WSL / others
    return (
        os.environ.get("GOOGLE_CHROME_BIN") or "",
        mac,
        "google-chrome",
        "chrome",
        "chromium",
        "chromium-browser",
    )


def _launch_external_chrome() -> Tuple[subprocess.Popen, int, str]:
    """
    –°—Ç–∞—Ä—Ç—É–µ—Ç –í–ù–ï–®–ù–ò–ô Chrome —Å –ø–æ—Ä—Ç–æ–º CDP. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (proc, port, user_data_dir).
    –ü—Ä–æ—Ü–µ—Å—Å –ù–ï —Ç—Ä–æ–≥–∞–µ–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è –∂–∏—Ç—å.
    """
    port = _find_free_port()
    user_data_dir = tempfile.mkdtemp(prefix="chrome-pw-profile-")

    exe = None
    for cand in _chrome_executable_candidates():
        if cand and (os.path.exists(cand) or cand in ("google-chrome", "chrome", "chromium", "chromium-browser")):
            exe = cand
            break
    if not exe:
        raise RuntimeError("–ù–µ –Ω–∞—à—ë–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Chrome. –ü–æ—Å—Ç–∞–≤—å Google Chrome –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    args = [
        exe,
        f"--remote-debugging-port={port}",
        f"--user-data-dir={user_data_dir}",
        "--no-first-run",
        "--no-default-browser-check",
        "--disable-background-networking",
        "--disable-features=Translate,BackForwardCache,AcceptCHFrame",
        "--disable-component-extensions-with-background-pages",
        "--disable-extensions",  # –º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞–¥–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        "--start-maximized",
        "about:blank",
    ]
    log.info("–ó–∞–ø—É—Å–∫–∞—é –≤–Ω–µ—à–Ω–∏–π Chrome: %s", " ".join(args))
    # macOS: subprocess –±–µ–∑ shell ‚Äî –æ–∫
    proc = subprocess.Popen(args, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ—Ä—Ç –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è
    deadline = time.time() + 10
    while time.time() < deadline:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex(("127.0.0.1", port)) == 0:
                log.info("Chrome CDP –ø–æ—Ä—Ç %s –¥–æ—Å—Ç—É–ø–µ–Ω", port)
                break
        time.sleep(0.2)
    else:
        raise RuntimeError("Chrome –Ω–µ –ø–æ–¥–Ω—è–ª CDP –ø–æ—Ä—Ç –≤–æ–≤—Ä–µ–º—è")

    return proc, port, user_data_dir


def _iter_frames(page: Page) -> Iterable[Frame]:
    yield page.main_frame
    for fr in page.frames:
        yield fr


def _first_visible(fr: Frame, selectors, timeout=4000):
    for sel in selectors:
        loc = fr.locator(sel)
        try:
            loc.first.wait_for(state="visible", timeout=timeout)
            return loc.first
        except Exception:
            continue
    return None


def open_notepad_and_type_persistent(login_text: str, password_text: str) -> str:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –í–ù–ï–®–ù–ï–ú–£ Chrome —á–µ—Ä–µ–∑ CDP, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç https://notepadonline.ru/app,
    –∂–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫—É, –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–µ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç:
        <login_text>\n<password_text>
    –í–Ω–µ—à–Ω–∏–π Chrome –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º (–ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞—ë—Ç—Å—è –∂–∏—Ç—å).
    """
    proc, port, _profile = _launch_external_chrome()

    try:
        with sync_playwright() as p:
            browser = p.chromium.connect_over_cdp(f"http://127.0.0.1:{port}")
            # –æ—Ç–∫—Ä–æ–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ/–∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ browser.contexts)
            context = browser.contexts[0] if browser.contexts else browser.new_context()
            page = context.new_page()

            url = "https://notepadonline.ru/app"
            page.goto(url, wait_until="domcontentloaded", timeout=60_000)
            try:
                page.wait_for_load_state("networkidle", timeout=15_000)
            except PWTimeout:
                pass

            # –∏–Ω–æ–≥–¥–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è/–°–æ–∑–¥–∞—Ç—å"
            try:
                page.get_by_role("button", name=lambda n: n and ("–°–æ–∑–¥–∞—Ç—å" in n or "–ù–æ–≤–∞—è" in n)).click(timeout=3_000)
            except Exception:
                pass

            # –ò—â–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
            editor = None
            editor_selectors = [
                '[contenteditable="true"]',
                'div[role="textbox"]',
                '.notepad, .editor, .ql-editor, .monaco-editor',
                'textarea',
            ]
            for fr in _iter_frames(page):
                editor = _first_visible(fr, editor_selectors, timeout=5_000)
                if editor:
                    break

            text_to_type = f"{login_text}\n{password_text}"

            if editor:
                editor.click()
                editor.type(text_to_type, delay=8)
            else:
                page.click("body", position={"x": 420, "y": 300})
                page.keyboard.type(text_to_type, delay=8)

            try:
                page.screenshot(path="notepad_filled.png", full_page=True)
            except Exception:
                pass

            # –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û CDP-—Å–µ—Å—Å–∏—é, –Ω–æ –ù–ï –ø—Ä–æ—Ü–µ—Å—Å Chrome.
            try:
                browser.close()  # —ç—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ CDP
            except Exception:
                pass

        # –í–ù–ï–®–ù–ò–ô Chrome –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∂–∏—Ç—å ‚Äî –æ–∫–Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º
        return f"–ì–æ—Ç–æ–≤–æ ‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã. Chrome –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º (–ø–æ—Ä—Ç {port})."

    except Exception as e:
        log.exception("CDP/Playwright error")
        # –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ù–ï —É–±–∏–≤–∞–µ–º proc ‚Äî —á—Ç–æ–±—ã –æ–∫–Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —É–≤–∏–¥–µ—Ç—å
        return f"–ù–µ —Å–º–æ–≥ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –±–ª–æ–∫–Ω–æ—Ç: {e}"


# =========================
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# =========================

@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(
        "–ë—Ä–æ, –∂–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª. –í–Ω–∏–∑—É ¬´–¢–µ—Å—Ç¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –≤—É–∑ ‚Üí –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å. "
        "–û—Ç–∫—Ä–æ—é –≤–∏–¥–∏–º—ã–π Chrome –∏ –≤—Å—Ç–∞–≤–ª—é –∏—Ö –≤ –æ–Ω–ª–∞–π–Ω-–±–ª–æ–∫–Ω–æ—Ç.",
        reply_markup=kb(),
    )


@dp.message(F.web_app_data)
async def on_web_app_data(m: Message):
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –º–∏–Ω–∏-–∞–ø–ø—ã ü§∑‚Äç‚ôÇÔ∏è")
        return

    kind = (data.get("kind") or "").strip()
    if kind == "paste_to_notepad":
        await handle_paste_to_notepad(m, data)
    else:
        await m.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {kind}. –û–±–Ω–æ–≤–∏ –º–∏–Ω–∏-–∞–ø–ø—É.")


async def handle_paste_to_notepad(m: Message, data: Dict[str, Any]):
    uni = (data.get("uni") or "").strip()
    login = (data.get("login") or "").strip()
    password = (data.get("password") or "").strip()

    if not (uni and login and password):
        await m.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—É–∑ –∏ –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return

    # –ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º (–¥–µ–º–æ! –≤ –ø—Ä–æ–¥–µ —à–∏—Ñ—Ä—É–π)
    db = load_db()
    db[str(m.from_user.id)] = {"uni": uni, "login": login, "password": password}
    save_db(db)

    await m.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é Chrome –∏ –≤—Å—Ç–∞–≤–ª—è—é –≤ –±–ª–æ–∫–Ω–æ—Ç‚Ä¶\n–í—É–∑: *{uni}*", parse_mode="Markdown")

    def _run():
        return open_notepad_and_type_persistent(login, password)

    try:
        result = await asyncio.to_thread(_run)
        await m.answer(result)
    except Exception as e:
        log.exception("Playwright error")
        await m.answer(f"Playwright —É–ø–∞–ª: {e}")


# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================

async def main():
    bot = Bot(BOT_TOKEN)
    log.info("Bot online. WEBAPP_URL=%s", WEBAPP_URL)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())