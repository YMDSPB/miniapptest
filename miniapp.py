import os, json, asyncio, logging
from pathlib import Path
from typing import Dict, Any

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# OpenAI (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π; –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Playwright-—á–∞—Å—Ç–∏)
from openai import OpenAI

# Playwright (sync API —É–¥–æ–±–Ω–µ–µ –∫—Ä—É—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("BOT_TOKEN/WEBAPP_URL –Ω–µ –∑–∞–¥–∞–Ω—ã")

oai = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("miniapp")
dp = Dispatcher()

# –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—Ä–µ–¥–æ–≤ (–¥–µ–º–æ!)
DB_PATH = Path("storage.json")
def load_db() -> Dict[str, Any]:
    if DB_PATH.exists():
        return json.load(open(DB_PATH, "r", encoding="utf-8"))
    return {}
def save_db(data: Dict[str, Any]) -> None:
    json.dump(data, open(DB_PATH, "w", encoding="utf-8"), ensure_ascii=False, indent=2)

def kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True, is_persistent=True
    )

@dp.message(CommandStart())
async def start(m: Message):
    await m.answer("–ë—Ä–æ, –∂–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª, –∫–Ω–æ–ø–∫–∞ ¬´–¢–µ—Å—Ç¬ª –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞ üòâ", reply_markup=kb())

@dp.message(F.web_app_data)
async def webapp(m: Message):
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–∞–ø–ø—ã.")
        return

    kind = data.get("kind")
    if kind == "run_test":
        await handle_run_test(m, data)
    else:
        await m.answer("–û–∫, –ø–æ–ª—É—á–∏–ª, –Ω–æ –Ω–µ –∑–Ω–∞—é —ç—Ç–æ—Ç 'kind'.")

async def handle_run_test(m: Message, data: Dict[str, Any]):
    user_id = str(m.from_user.id)
    uni = (data.get("uni") or "").strip()
    login = (data.get("login") or "").strip()
    password = (data.get("password") or "").strip()
    text = (data.get("text") or "").strip()

    if not (uni and login and password and text):
        await m.answer("–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è –≤ –º–∏–Ω–∏-–∞–ø–ø–µ ‚Äî —É–Ω–∏–≤–µ—Ä, –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ —Ç–µ–∫—Å—Ç.")
        return

    # –ó–∞–ø–æ–º–Ω–∏–º –≤—ã–±–æ—Ä ‚Äî –≤ –¥–µ–º–æ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø—Ä–æ–¥–µ: —à–∏—Ñ—Ä—É–π/—Ö—Ä–∞–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!)
    db = load_db()
    db[user_id] = {"uni": uni, "login": login, "password": password}
    save_db(db)

    await m.answer(f"–ü—Ä–∏–Ω—è–ª. –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: *{uni}*. –û—Ç–∫—Ä–æ—é –±—Ä–∞—É–∑–µ—Ä –∏ –≤—Å—Ç–∞–≤–ª—é —Ç–µ–∫—Å—Ç‚Ä¶", parse_mode="Markdown")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright (–≤–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä)
    def run_playwright(note_text: str):
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=False, slow_mo=50)  # slow_mo –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            context = browser.new_context()
            page = context.new_page()
            page.goto("https://notepadonline.ru/app", timeout=60000)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å¬ª ‚Äî –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å:
            try:
                page.get_by_role("button", name=lambda n: n and "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é" in n).click(timeout=3000)
            except Exception:
                pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–ª–∞–π–Ω-–±–ª–æ–∫–Ω–æ—Ç—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤–Ω—É—Ç—Ä–∏ iframe.
            # –ò—â–µ–º contenteditable –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ‚Ä¶
            editor = None
            try:
                editor = page.locator('[contenteditable="true"]').first
                editor.wait_for(state="visible", timeout=8000)
            except PWTimeout:
                editor = None

            # ‚Ä¶–∏–ª–∏ –≤ –∫–∞–¥—Ä–∞—Ö:
            if editor is None or not editor.count():
                for fr in page.frames:
                    try:
                        ed = fr.locator('[contenteditable="true"]').first
                        ed.wait_for(state="visible", timeout=3000)
                        editor = ed
                        break
                    except Exception:
                        continue

            if editor is None or (hasattr(editor, "count") and not editor.count()):
                # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –∫–ª–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä –∏ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                page.click("body", position={"x": 400, "y": 300})
                page.keyboard.type(note_text)
            else:
                editor.click()
                # –í—Å—Ç–∞–≤–∏–º —Ç–µ–∫—Å—Ç: –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ type, –∞ –º–æ–∂–Ω–æ setInnerText —á–µ—Ä–µ–∑ eval
                editor.type(note_text, delay=10)

            # –°–Ω–∏–º–æ–∫ –Ω–∞ –ø–∞–º—è—Ç—å (–≤ —Ç–≤–æ—é –ø–∞–ø–∫—É)
            page.screenshot(path="notepad_filled.png", full_page=True)
            # –ù–µ –∑–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä —Å—Ä–∞–∑—É ‚Äî –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
            # –ó–∞–∫—Ä–æ–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥?
            # page.wait_for_timeout(3000)
            # browser.close()

    try:
        await asyncio.to_thread(run_playwright, text)
        await m.answer("–ì–æ—Ç–æ–≤–æ. –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω-–±–ª–æ–∫–Ω–æ—Ç ‚úÖ\n(–°–∫—Ä–∏–Ω –≤ —Ñ–∞–π–ª–µ notepad_filled.png —É —Ç–µ–±—è –ª–æ–∫–∞–ª—å–Ω–æ).")
    except Exception as e:
        logging.exception("Playwright error")
        await m.answer(f"–ù–µ —Å–º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")

async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())