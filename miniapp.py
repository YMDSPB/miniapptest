# miniapp.py
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import logging
from pathlib import Path
from typing import Any, Dict, Iterable, Optional

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# OpenAI –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∏—á; –¥–ª—è –ª–æ–≥–∏–Ω–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
from openai import OpenAI  # noqa: F401

# Playwright
from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout, Page, Frame

load_dotenv()
BOT_TOKEN  = os.getenv("BOT_TOKEN", "").strip()
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()

if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("BOT_TOKEN/WEBAPP_URL –Ω–µ –∑–∞–¥–∞–Ω—ã")

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("miniapp")
dp = Dispatcher()

# ====== –ú–ê–ü–ê –õ–ú–°-–ª–æ–≥–∏–Ω–æ–≤ –ø–æ –≤—É–∑–∞–º (–≤–ø–∏—à–∏ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ URL) ======
LMS_URLS: Dict[str, str] = {
    "–í–®–≠ ‚Äî –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç": "https://lms.hse.ru/",   # –ø—Ä–∏–º–µ—Ä
    "–ú–ì–£ –∏–º. –ú. –í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞":                        "https://lms.msu.ru/",    # –ø—Ä–∏–º–µ—Ä
    "–°–ü–±–ì–£":                                           "https://lms.spbu.ru/",
    "–ú–ì–ò–ú–û":                                           "https://lms.mgimo.ru/",
    "–ë–∞—É–º–∞–Ω–∫–∞ (–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞)":                     "https://lms.bmstu.ru/",
    "–ò–¢–ú–û":                                            "https://lms.itmo.ru/",
    "–§–∏–∑—Ç–µ—Ö (–ú–§–¢–ò)":                                   "https://lms.mipt.ru/",
    "–ù–ò–¢–£ –ú–ò–°–ò–°":                                      "https://lms.misis.ru/",
    "–ù–ì–£":                                             "https://lms.nsu.ru/",
    "–£–†–§–£":                                            "https://lms.urfu.ru/",
}
# –ï—Å–ª–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤—É–∑—É –Ω–µ—Ç URL ‚Äî –º–æ–∂–Ω–æ –∫–∏–Ω—É—Ç—å –Ω–∞ –∫–∞–∫—É—é-—Ç–æ —Ñ–æ—Ä–º—É/—Å—Ç–∞–±:
DEFAULT_LMS_URL = "https://example.com/login"  # –ø–æ–¥–º–µ–Ω–∏—à—å

# –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–µ–º–∫–∞). –í –ø—Ä–æ–¥–µ ‚Äî —à–∏—Ñ—Ä–æ–≤–∞—Ç—å!
DB_PATH = Path("storage.json")
def load_db() -> Dict[str, Any]:
    if DB_PATH.exists():
        return json.load(open(DB_PATH, "r", encoding="utf-8"))
    return {}
def save_db(data: Dict[str, Any]) -> None:
    json.dump(data, open(DB_PATH, "w", encoding="utf-8"), ensure_ascii=False, indent=2)

def miniapp_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True,
        is_persistent=True,
    )

@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "–ñ–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–¢–µ—Å—Ç¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –≤—É–∑ ‚Üí –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å. "
        "–Ø –æ—Ç–∫—Ä–æ—é –±—Ä–∞—É–∑–µ—Ä –∏ –∑–∞–ª–æ–≥–∏–Ω—é—Å—å –≤ –õ–ú–°.",
        reply_markup=miniapp_kb()
    )

@dp.message(F.web_app_data)
async def on_web_app_data(m: Message):
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–∞–ø–ø—ã ü§∑‚Äç‚ôÇÔ∏è")
        return

    kind = (data.get("kind") or "").strip()
    if kind == "login_lms" or kind == "run_test":  # –ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä–æ–µ –∏–º—è 'run_test'
        await handle_login_lms(m, data)
    else:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è. –û–±–Ω–æ–≤–∏ –º–∏–Ω–∏-–∞–ø–ø—É –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# ----------------- Playwright helpers -----------------

def _iter_contexts(page: Page) -> Iterable[Frame]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ—Ä–µ–π–º—ã: —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º page.main_frame, –ø–æ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ."""
    yield page.main_frame
    for fr in page.frames:
        yield fr

def _first_visible(fr: Frame, selectors: Iterable[str], timeout: int = 4000):
    """–ò—â–µ–º –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–ø–∏—Å–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ (–≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ—Ä–µ–π–º–µ)."""
    for sel in selectors:
        loc = fr.locator(sel)
        try:
            loc.first.wait_for(state="visible", timeout=timeout)
            return loc.first
        except Exception:
            continue
    return None

def playwright_login_flow(url: str, login: str, password: str, keep_open: bool = True) -> str:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä (–ù–ï headless), –∂–¥—ë—Ç —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å,
    –∫–ª–∏–∫–∞–µ—Ç –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏. –ü—ã—Ç–∞–µ—Ç—Å—è –¥–µ—Ç–µ–∫—Ç–∏—Ç—å —É—Å–ø–µ—Ö. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    with sync_playwright() as p:
        # –≤–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä, –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
        browser = p.chromium.launch(headless=False)
        context = browser.new_context()
        page = context.new_page()

        # –ñ–¥—ë–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É: domcontentloaded + networkidle
        page.goto(url, wait_until="domcontentloaded", timeout=60000)
        try:
            page.wait_for_load_state("networkidle", timeout=15000)
        except PWTimeout:
            # –û–∫, –µ—Å–ª–∏ —Å–∞–π—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            pass

        # –ò—â–µ–º –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—Ä–µ–π–º–µ –∏ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö
        login_selectors = [
            'input[name="login"]',
            'input[name="username"]',
            'input[id*="user"]',
            'input[type="email"]',
            'input[type="text"]',
        ]
        pass_selectors = [
            'input[name="password"]',
            'input[id*="pass"]',
            'input[type="password"]',
        ]
        submit_selectors = [
            'button:has-text("–í–æ–π—Ç–∏")',
            'button[type="submit"]',
            'input[type="submit"]',
            'button:has-text("Log in")',
            'button:has-text("Sign in")',
        ]

        login_el = None
        pass_el  = None
        submit_el= None
        used_frame: Optional[Frame] = None

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ñ—Ä–µ–π–º—ã
        for fr in _iter_contexts(page):
            if not login_el:
                login_el = _first_visible(fr, login_selectors)
            if not pass_el:
                pass_el  = _first_visible(fr, pass_selectors)
            if not submit_el:
                submit_el = _first_visible(fr, submit_selectors)
            if login_el and pass_el:
                used_frame = fr
                break

        if not (login_el and pass_el):
            return "–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è. –ü—Ä–æ–≤–µ—Ä—å URL –õ–ú–° –∏–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã."

        # –ó–∞–ø–æ–ª–Ω—è–µ–º
        login_el.click()
        login_el.fill(login)
        pass_el.click()
        pass_el.fill(password)

        # –ù–∞–∂–∏–º–∞–µ–º –í–æ–π—Ç–∏
        if submit_el:
            submit_el.click()
        else:
            # –∏–Ω–æ–≥–¥–∞ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            pass_el.press("Enter")

        # –ñ–¥—ë–º —Å–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è: networkidle / —Å–º–µ–Ω—É URL / –ø—Ä–æ–ø–∞–∂—É —Ñ–æ—Ä–º—ã
        success = False
        try:
            page.wait_for_load_state("networkidle", timeout=15000)
        except PWTimeout:
            pass

        # —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—Ö–∞: –Ω–µ—Ç –ø–æ–ª–µ–π –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –≤–∏–¥–∏–º—ã—Ö, –µ—Å—Ç—å –º–µ–Ω—é/–∞–≤–∞—Ç–∞—Ä/–≤—ã—Ö–æ–¥ –∏ —Ç.–ø.
        try:
            # –µ—Å–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞ –≤–∏–¥–∏–º—ã ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –ø—É—Å—Ç–∏–ª–æ
            if used_frame:
                still_login = _first_visible(used_frame, login_selectors, timeout=2000)
                still_pass  = _first_visible(used_frame, pass_selectors, timeout=2000)
                success = not (still_login and still_pass)
            else:
                success = True
        except Exception:
            success = True

        # –ë—Ä–∞—É–∑–µ—Ä **–ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º**, —á—Ç–æ–±—ã —Ç—ã –≤–∏–¥–µ–ª, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        # if not keep_open:
        #     browser.close()

        return "–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω ‚úÖ" if success else "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è ‚ùå (–ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å/2FA)"

# ----------------- Handler -----------------

async def handle_login_lms(m: Message, data: Dict[str, Any]):
    user_id = str(m.from_user.id)
    uni = (data.get("uni") or "").strip()
    login = (data.get("login") or "").strip()
    password = (data.get("password") or "").strip()

    if not (uni and login and password):
        await m.answer("–ó–∞–ø–æ–ª–Ω–∏ –≤—É–∑ + –ª–æ–≥–∏–Ω + –ø–∞—Ä–æ–ª—å –≤ –º–∏–Ω–∏-–∞–ø–ø–µ.")
        return

    url = LMS_URLS.get(uni) or DEFAULT_LMS_URL

    # –°–æ—Ö—Ä–∞–Ω–∏–º (–¥–µ–º–æ; –≤ –ø—Ä–æ–¥–µ ‚Äî —à–∏—Ñ—Ä—É–π!)
    db = load_db()
    db[user_id] = {"uni": uni, "login": login, "password": password, "url": url}
    save_db(db)

    await m.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ –ª–æ–≥–∏–Ω—é—Å—å –≤ –õ–ú–° *{uni}*‚Ä¶", parse_mode="Markdown")

    def _run():
        return playwright_login_flow(url, login, password, keep_open=True)

    try:
        result = await asyncio.to_thread(_run)
        await m.answer(result)
    except Exception as e:
        logging.exception("Playwright login error")
        await m.answer(f"–ù–µ —Å–º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–Ω: {e}")

async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())