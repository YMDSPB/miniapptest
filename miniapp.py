# miniapp.py
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import logging
import socket
import subprocess
import tempfile
import time
from pathlib import Path
from typing import Dict, Any, Iterable, Optional, Tuple

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from playwright.sync_api import (
    sync_playwright,
    TimeoutError as PWTimeout,
    Page,
    Frame,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥
# =========================

load_dotenv()
BOT_TOKEN  = (os.getenv("BOT_TOKEN") or "").strip()
WEBAPP_URL = (os.getenv("WEBAPP_URL") or "").strip()  # https://<—Ç—ã>.pages.dev?v=...

if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("–ó–∞–¥–∞–π BOT_TOKEN –∏ WEBAPP_URL –≤ .env")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("miniapp")

dp = Dispatcher()
DB_PATH = Path("storage.json")


def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True,
        is_persistent=True,
    )

# =========================
# –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏: –≤–Ω–µ—à–Ω–∏–∏ÃÜ Chrome (CDP)
# =========================

def _find_free_port() -> int:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(("127.0.0.1", 0))
        return s.getsockname()[1]


def _chrome_executable_candidates() -> Tuple[str, ...]:
    mac = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
    return (
        os.environ.get("GOOGLE_CHROME_BIN") or "",
        mac,
        "google-chrome",
        "chrome",
        "chromium",
        "chromium-browser",
    )


def _launch_external_chrome() -> Tuple[subprocess.Popen, int, str]:
    """
    –°—Ç–∞—Ä—Ç—É–µ–º –≤–Ω–µ—à–Ω–∏–π Chrome —Å CDP-–ø–æ—Ä—Ç–æ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ–º (proc, port, user_data_dir).
    –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º proc ‚Äî –æ–∫–Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∂–∏—Ç—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    port = _find_free_port()
    user_data_dir = tempfile.mkdtemp(prefix="chrome-hse-profile-")

    exe = None
    for cand in _chrome_executable_candidates():
        if cand and (os.path.exists(cand) or cand in ("google-chrome", "chrome", "chromium", "chromium-browser")):
            exe = cand
            break
    if not exe:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω Chrome. –ü–æ—Å—Ç–∞–≤—å Google Chrome –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    args = [
        exe,
        f"--remote-debugging-port={port}",
        f"--user-data-dir={user_data_dir}",
        "--no-first-run",
        "--no-default-browser-check",
        "--disable-background-networking",
        "--disable-features=Translate,BackForwardCache,AcceptCHFrame",
        "--disable-component-extensions-with-background-pages",
        "--disable-extensions",
        "--start-maximized",
        "about:blank",
    ]
    log.info("–ó–∞–ø—É—Å–∫–∞—é –≤–Ω–µ—à–Ω–∏–π Chrome: %s", " ".join(args))
    proc = subprocess.Popen(args, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –ø–æ—Ä—Ç
    deadline = time.time() + 10
    while time.time() < deadline:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex(("127.0.0.1", port)) == 0:
                log.info("Chrome CDP –ø–æ—Ä—Ç %s –¥–æ—Å—Ç—É–ø–µ–Ω", port)
                break
        time.sleep(0.2)
    else:
        raise RuntimeError("Chrome –Ω–µ –ø–æ–¥–Ω—è–ª CDP –ø–æ—Ä—Ç –≤–æ–≤—Ä–µ–º—è")

    return proc, port, user_data_dir

# =========================
# Playwright helpers
# =========================

def _iter_frames(page: Page) -> Iterable[Frame]:
    yield page.main_frame
    for fr in page.frames:
        yield fr


def _first_visible(fr: Frame, selectors, timeout=4000):
    for sel in selectors:
        loc = fr.locator(sel)
        try:
            loc.first.wait_for(state="visible", timeout=timeout)
            return loc.first
        except Exception:
            continue
    return None


def login_hse_openid(auth_url: str, login_text: str, password_text: str) -> str:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É Chrome (CDP), –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç HSE Keycloak auth_url,
    –∂–¥—ë—Ç —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞, –≤–≤–æ–¥–∏—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ —Å–∞–±–º–∏—Ç–∏—Ç. –û–∫–Ω–æ Chrome –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º.
    """
    proc, port, _prof = _launch_external_chrome()

    try:
        with sync_playwright() as p:
            browser = p.chromium.connect_over_cdp(f"http://127.0.0.1:{port}")
            context = browser.contexts[0] if browser.contexts else browser.new_context()
            page = context.new_page()

            # –ü–µ—Ä–µ—Ö–æ–¥ + —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            page.goto(auth_url, wait_until="domcontentloaded", timeout=60_000)
            try:
                page.wait_for_load_state("networkidle", timeout=15_000)
            except PWTimeout:
                pass

            # –¢–∏–ø–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã Keycloak
            login_selectors = ['#username', 'input[name="username"]', 'input[type="email"]', 'input[type="text"]']
            pass_selectors  = ['#password', 'input[name="password"]', 'input[type="password"]']
            submit_selectors= ['#kc-login', 'button[type="submit"]', 'input[type="submit"]',
                               'button:has-text("–í–æ–π—Ç–∏")', 'button:has-text("Log in")', 'button:has-text("Sign in")']

            login_el = pass_el = submit_el = None
            used_frame: Optional[Frame] = None

            for fr in _iter_frames(page):
                if not login_el: login_el = _first_visible(fr, login_selectors, timeout=8000)
                if not pass_el:  pass_el  = _first_visible(fr, pass_selectors,  timeout=8000)
                if not submit_el:submit_el= _first_visible(fr, submit_selectors, timeout=4000)
                if login_el and pass_el:
                    used_frame = fr
                    break

            if not (login_el and pass_el):
                return "–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ SSO. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É/—Å—Ç—Ä–∞–Ω–∏—Ü—É."

            login_el.click()
            login_el.fill(login_text)
            pass_el.click()
            pass_el.fill(password_text)

            if submit_el:
                submit_el.click()
            else:
                pass_el.press("Enter")

            # –ñ–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            success = False
            try:
                page.wait_for_load_state("networkidle", timeout=20_000)
            except PWTimeout:
                pass

            try:
                # –µ—Å–ª–∏ –ø–æ–ª—è –≤—Å—ë –µ—â—ë –≤–∏–¥–∏–º—ã ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ñ–æ—Ä–º–µ (–æ—à–∏–±–∫–∞ –ø–∞—Ä–æ–ª—è/2FA)
                still_login = used_frame and _first_visible(used_frame, login_selectors, timeout=2000)
                still_pass  = used_frame and _first_visible(used_frame, pass_selectors,  timeout=2000)
                success = not (still_login and still_pass)
            except Exception:
                success = True

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û CDP-—Å–µ—Å—Å–∏—é, –≤–Ω–µ—à–Ω–µ–µ –æ–∫–Ω–æ Chrome –æ—Å—Ç–∞—ë—Ç—Å—è
            try:
                browser.close()
            except Exception:
                pass

            return "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ –û–∫–Ω–æ Chrome –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º." if success else \
                   "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ ‚ùå –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å/2FA. –û–∫–Ω–æ Chrome –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º."

    except Exception as e:
        log.exception("HSE login error")
        return f"–ù–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥: {e}"

# =========================
# –ë–æ—Ç-—Ö—ç–Ω–¥–ª–µ—Ä—ã
# =========================

@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(
        "–ñ–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª ‚Üí ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª ‚Üí –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å. "
        "–Ø –æ—Ç–∫—Ä–æ—é HSE SSO –≤ –≤–∏–¥–∏–º–æ–º Chrome, –∑–∞–ª–æ–≥–∏–Ω—é—Å—å –∏ –æ—Å—Ç–∞–≤–ª—é –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º.",
        reply_markup=kb(),
    )


@dp.message(F.web_app_data)
async def on_web_app_data(m: Message):
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –º–∏–Ω–∏-–∞–ø–ø—ã üòê")
        return

    kind = (data.get("kind") or "").strip()
    if kind == "login_hse":
        await handle_login_hse(m, data)
    else:
        await m.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {kind}. –û–±–Ω–æ–≤–∏ –º–∏–Ω–∏-–∞–ø–ø—É.")


async def handle_login_hse(m: Message, data: Dict[str, Any]):
    login = (data.get("login") or "").strip()
    password = (data.get("password") or "").strip()
    auth_url = (data.get("auth_url") or "").strip()

    if not (login and password and auth_url):
        await m.answer("–ù—É–∂–Ω—ã –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Å—Å—ã–ª–∫–∞ auth_url.")
        return

    await m.answer("–û—Ç–∫—Ä—ã–≤–∞—é Chrome –∏ –≤—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥ –≤ –õ–ú–° (HSE SSO)‚Ä¶")

    def _run():
        return login_hse_openid(auth_url, login, password)

    try:
        result = await asyncio.to_thread(_run)
        await m.answer(result)
    except Exception as e:
        log.exception("Playwright error")
        await m.answer(f"Playwright —É–ø–∞–ª: {e}")

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================

async def main():
    bot = Bot(BOT_TOKEN)
    log.info("Bot online. WEBAPP_URL=%s", WEBAPP_URL)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())