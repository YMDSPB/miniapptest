# miniapp.py
# -*- coding: utf-8 -*-

import os
import json
import asyncio
import logging
from pathlib import Path
from typing import Dict, Any, Iterable, Optional

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from playwright.sync_api import (
    sync_playwright,
    TimeoutError as PWTimeout,
    Page,
    Frame,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
# =========================

load_dotenv()
BOT_TOKEN  = (os.getenv("BOT_TOKEN") or "").strip()
WEBAPP_URL = (os.getenv("WEBAPP_URL") or "").strip()  # https://<—Ç—ã>.pages.dev?v=...
if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("–ó–∞–¥–∞–π BOT_TOKEN –∏ WEBAPP_URL –≤ .env")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("miniapp")

dp = Dispatcher()

# –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–µ–º–æ-–±–∞–∑–∞ (–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤—É–∑–∞/–ª–æ–≥–∏–Ω)
DB_PATH = Path("storage.json")


def load_db() -> Dict[str, Any]:
    if DB_PATH.exists():
        try:
            return json.load(open(DB_PATH, "r", encoding="utf-8"))
        except Exception:
            return {}
    return {}


def save_db(data: Dict[str, Any]) -> None:
    json.dump(data, open(DB_PATH, "w", encoding="utf-8"), ensure_ascii=False, indent=2)


def kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True,
        is_persistent=True,
    )

# =========================
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# =========================

@dp.message(CommandStart())
async def cmd_start(m: Message):
    await m.answer(
        "–ë—Ä–æ, –∂–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø—É¬ª. –í–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞ ¬´–¢–µ—Å—Ç¬ª ‚Üí –≤—ã–±–µ—Ä–∏ –≤—É–∑ ‚Üí –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å. "
        "–Ø –æ—Ç–∫—Ä–æ—é –≤–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä –∏ –≤—Å—Ç–∞–≤–ª—é –∏—Ö –≤ –æ–Ω–ª–∞–π–Ω-–±–ª–æ–∫–Ω–æ—Ç.",
        reply_markup=kb(),
    )


@dp.message(F.web_app_data)
async def on_web_app_data(m: Message):
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        await m.answer("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –º–∏–Ω–∏-–∞–ø–ø—ã ü§∑‚Äç‚ôÇÔ∏è")
        return

    kind = (data.get("kind") or "").strip()
    if kind == "paste_to_notepad":
        await handle_paste_to_notepad(m, data)
    else:
        await m.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {kind}. –û–±–Ω–æ–≤–∏ –º–∏–Ω–∏-–∞–ø–ø—É.")


# =========================
# Playwright —É—Ç–∏–ª–∏—Ç—ã
# =========================

def _iter_frames(page: Page) -> Iterable[Frame]:
    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º + –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
    yield page.main_frame
    for fr in page.frames:
        yield fr


def _first_visible(fr: Frame, selectors: Iterable[str], timeout: int = 4000):
    # –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–ø–∏—Å–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    for sel in selectors:
        loc = fr.locator(sel)
        try:
            loc.first.wait_for(state="visible", timeout=timeout)
            return loc.first
        except Exception:
            continue
    return None


def open_notepad_and_type(login_text: str, password_text: str) -> str:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç https://notepadonline.ru/app –≤ –í–ò–î–ò–ú–û–ú –±—Ä–∞—É–∑–µ—Ä–µ (headless=False),
    –∂–¥—ë—Ç —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (domcontentloaded + –ø–æ–ø—ã—Ç–∫–∞ networkidle),
    –∏—â–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –∏ –ø–µ—á–∞—Ç–∞–µ—Ç:
        <login_text>\n<password_text>
    –ë—Ä–∞—É–∑–µ—Ä –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å.
    """
    url = "https://notepadonline.ru/app"

    with sync_playwright() as p:
        # –í–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä, –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö sleep
        browser = p.chromium.launch(headless=False)  # –æ–∫–Ω–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ
        context = browser.new_context()
        page = context.new_page()

        # –ü–µ—Ä–µ—Ö–æ–¥ + —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        page.goto(url, wait_until="domcontentloaded", timeout=60_000)
        try:
            page.wait_for_load_state("networkidle", timeout=15_000)
        except PWTimeout:
            # –û–∫–µ–π, –µ—Å–ª–∏ —Å–∞–π—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥—ë—Ä–≥–∞–µ—Ç —Å–µ—Ç—å ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            pass

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å ¬´–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å¬ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            page.get_by_role("button", name=lambda n: n and ("–°–æ–∑–¥–∞—Ç—å" in n or "–ù–æ–≤–∞—è" in n)).click(timeout=3_000)
        except Exception:
            pass

        # –ò—â–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        editor = None
        editor_selectors = [
            '[contenteditable="true"]',
            'div[role="textbox"]',
            '.notepad, .editor, .ql-editor, .monaco-editor',
            'textarea',
        ]

        for fr in _iter_frames(page):
            editor = _first_visible(fr, editor_selectors, timeout=5_000)
            if editor:
                break

        text_to_type = f"{login_text}\n{password_text}"

        if editor:
            editor.click()
            editor.type(text_to_type, delay=8)  # –ø–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ, –≤–∏–¥–Ω–æ –≥–ª–∞–∑–∞–º–∏
        else:
            # fallback: –∫–ª–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–µ—á–∞—Ç—å ¬´–≤ –Ω–∏–∫—É–¥–∞¬ª ‚Äî –º–Ω–æ–≥–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ª–æ–≤—è—Ç –≤–≤–æ–¥
            page.click("body", position={"x": 420, "y": 300})
            page.keyboard.type(text_to_type, delay=8)

        # –°–Ω–∏–º–æ–∫ –Ω–∞ –ø–∞–º—è—Ç—å, —Ä—è–¥–æ–º —Å miniapp.py
        try:
            page.screenshot(path="notepad_filled.png", full_page=True)
        except Exception:
            pass

        # –ë–†–ê–£–ó–ï–† –ù–ï –ó–ê–ö–†–´–í–ê–ï–ú
        return "–ì–æ—Ç–æ–≤–æ ‚úÖ –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±–ª–æ–∫–Ω–æ—Ç. –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∫—Ä—ã—Ç—ã–º."


# =========================
# –•—ç–Ω–¥–ª–µ—Ä –ª–æ–≥–∏–∫–∏ –≤—Å—Ç–∞–≤–∫–∏
# =========================

async def handle_paste_to_notepad(m: Message, data: Dict[str, Any]):
    uni = (data.get("uni") or "").strip()
    login = (data.get("login") or "").strip()
    password = (data.get("password") or "").strip()

    if not (uni and login and password):
        await m.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—É–∑ –∏ –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
        return

    # –ü–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º (–î–ï–ú–û! –í –ø—Ä–æ–¥–µ —à–∏—Ñ—Ä—É–π!)
    db = load_db()
    db[str(m.from_user.id)] = {"uni": uni, "login": login, "password": password}
    save_db(db)

    await m.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é –±–ª–æ–∫–Ω–æ—Ç –∏ –≤—Å—Ç–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ‚Ä¶\n–í—É–∑: *{uni}*", parse_mode="Markdown")

    def _run():
        return open_notepad_and_type(login, password)

    try:
        result = await asyncio.to_thread(_run)
        await m.answer(result)
    except Exception as e:
        log.exception("Playwright error")
        await m.answer(f"Playwright —É–ø–∞–ª: {e}")


# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================

async def main():
    bot = Bot(BOT_TOKEN)
    log.info("Bot online. WEBAPP_URL=%s", WEBAPP_URL)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())